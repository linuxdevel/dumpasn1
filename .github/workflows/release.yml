name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # needed for creating releases

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      TAG: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          make clean || true
          make
          file dumpasn1 || true

      - name: Install make (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install make --no-progress -y

      - name: Set up Developer Command Prompt for VS (MSVC)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build (Windows via makefile)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          make -f Makefile.win clean || exit 0
          make -f Makefile.win

      - name: Package (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          ARCHIVE="dumpasn1-${TAG}-${RUNNER_OS}-x86_64.tar.gz"
          tar czf "$ARCHIVE" dumpasn1 dumpasn1.cfg
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$ARCHIVE" dumpasn1 dumpasn1.cfg > checksums-${RUNNER_OS}.txt
          else
            # macOS fallback
            shasum -a 256 "$ARCHIVE" dumpasn1 dumpasn1.cfg > checksums-${RUNNER_OS}.txt
          fi

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $zip = "dumpasn1-$env:TAG-Windows-x86_64.zip"
          Compress-Archive -Path dumpasn1.exe,dumpasn1.cfg -DestinationPath $zip
          $files = $zip,'dumpasn1.exe','dumpasn1.cfg'
          if (Test-Path checksums-Windows.txt) { Remove-Item checksums-Windows.txt }
          foreach ($f in $files) {
            $hash = (Get-FileHash -Algorithm SHA256 -Path $f).Hash
            "$hash  $f" | Out-File checksums-Windows.txt -Append -Encoding ascii
          }

      - name: Upload raw artifacts (Linux / macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: dumpasn1-${{ runner.os }}-raw
          path: |
            dumpasn1
            dumpasn1.cfg
            checksums-${{ runner.os }}.txt

      - name: Upload raw artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: dumpasn1-${{ runner.os }}-raw
          path: |
            dumpasn1.exe
            dumpasn1.cfg
            checksums-Windows.txt

      - name: Upload packaged archive
        uses: actions/upload-artifact@v4
        with:
          name: dumpasn1-${{ runner.os }}-archive
          path: |
            dumpasn1-${{ env.TAG }}-${{ runner.os }}-x86_64.tar.gz
            dumpasn1-${{ env.TAG }}-Windows-x86_64.zip
            checksums-${{ runner.os }}.txt
          if-no-files-found: ignore

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    env:
      TAG: ${{ github.ref_name }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: |
          ls -R artifacts

      - name: Prepare release assets (deduplicate & rename)
        run: |
          set -e
          mkdir -p upload
          # Archives
          cp artifacts/dumpasn1-Linux-archive/dumpasn1-${TAG}-Linux-x86_64.tar.gz upload/ 2>/dev/null || true
          cp artifacts/dumpasn1-macOS-archive/dumpasn1-${TAG}-macOS-x86_64.tar.gz upload/ 2>/dev/null || true
          cp artifacts/dumpasn1-Windows-archive/dumpasn1-${TAG}-Windows-x86_64.zip upload/ 2>/dev/null || true
          # (Raw binaries and config omitted from release assets)
          # Checksums (rename to lowercase OS)
          [ -f artifacts/dumpasn1-Linux-archive/checksums-Linux.txt ] && cp artifacts/dumpasn1-Linux-archive/checksums-Linux.txt upload/checksums-linux.txt
          [ -f artifacts/dumpasn1-macOS-archive/checksums-macOS.txt ] && cp artifacts/dumpasn1-macOS-archive/checksums-macOS.txt upload/checksums-macos.txt
            # Windows checksums
          [ -f artifacts/dumpasn1-Windows-archive/checksums-Windows.txt ] && cp artifacts/dumpasn1-Windows-archive/checksums-Windows.txt upload/checksums-windows.txt || \
          [ -f artifacts/dumpasn1-Windows-raw/checksums-Windows.txt ] && cp artifacts/dumpasn1-Windows-raw/checksums-Windows.txt upload/checksums-windows.txt
          echo "Prepared assets:" && ls -1 upload

      - name: Generate release notes (simple)
        id: notes
        run: |
          TAG="${GITHUB_REF##*/}"
          {
            echo "dumpasn1 release $TAG"
            echo
            echo "Included assets (archives + checksums only):" 
            ls -1 upload
          } > RELEASE_NOTES.md
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: dumpasn1 ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.notes }}
          files: |
            upload/dumpasn1-*.tar.gz
            upload/dumpasn1-*.zip
            upload/checksums-*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Optional: only run release job if tag starts with v (already filtered) and not a prerelease pattern
    # Could add conditional logic here if needed for prereleases.
